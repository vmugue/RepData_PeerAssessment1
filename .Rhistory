dir
dir()
mkdir("figure")
mcdir(123)
ls()
exists("doc")
file.exists("doc")
if(!file.exists("figure")) dir.create("figure")
file.exists("figure")
file.exists("figure")
unlink("figure/")
file.exists("figure")
file.exists("figure")
unlink("figure")
file.exists("figure")
unlink("figure")
unlink("figure", recursive = TRUE)
unlink("figure")
file.exists("figure")
unzip("activity.zip", overwrite = FALSE, exdir = "figure")
unzip("activity.zip", overwrite = FALSE, exdir = "figure")
tryCatch(unzip("activity.zip", overwrite = FALSE, exdir = "figure"), warning = function(w) "error")
tryCatch(unzip("activity.zip", overwrite = FALSE, exdir = "figure"), warning = function(w) "file already exists")
init_activ <- read.csv("figure/activity.csv")
head(init_activ)
head(init_activm n = 10)
head(init_activ, n = 10)
head(init_activ, n = 200)
#init_activ$date + init_activ$interval / 60
initActiv <- read.csv("figure/activity.csv")
initActiv <- read.csv("figure/activity.csv")
initActiv <- read.csv("figure/activity.csv")
unzip("activity.zip", overwrite = FALSE, exdir = "figure"),
tryCatch(
unzip("activity.zip", overwrite = FALSE, exdir = "figure"),
warning = function(w) "file already exists")
tryCatch(
unzip("activity.zip", overwrite = FALSE, exdir = "figure"),
warning = function(w) "file already exists")
initActiv <- read.csv("figure/activity.csv")
```
```
```
```
## Loading and preprocessing the data
```r
tryCatch(
unzip("activity.zip", overwrite = FALSE, exdir = "figure"),
warning = function(w) "file already exists")
initActiv <- read.csv("figure/activity.csv")
initActiv <- read.csv("figure/activity.csv")
head(initActiv, nrow = 10)
head(initActiv, n = 10)
head(initActiv, n = 30)
head(initActiv, n = 30)[, 3]
head(initActiv, n = 30)[, 3]/60
head(initActiv, n = 30)[, 3]%60
head(initActiv, n = 30)[, 3] % 60
head(initActiv, n = 30)[, 3] %/ 60
head(initActiv, n = 30)[, 3] // 60
head(initActiv, n = 30)[, 3] / 60
floor(head(initActiv, n = 30)[, 3] / 60)
initActiv$hour <- floor(initActiv$interval / 60)
initActiv$minute <- initActiv$interval - initActiv$hour*60
head(initActiv)
head(initActiv, n = 100)
initActiv$datetime <- as.POSIXlt(paste(initActiv$date, initActiv$hour, initActiv$minute, sep = " "), format = "%Y-%m-%d %H-%M")
head(initActiv, n = 10)
initActiv$datetime <- as.POSIXlt(paste(initActiv$date, initActiv$hour, initActiv$minute, sep = " "), format = "%Y-%m-%d %H %M")
head(initActiv, n = 10)
colMeans(initActiv)
colMeans(initActiv$steps)
colMeans(initActiv[, 1:2])
tapply(initActiv$interval, initActiv$date, mean)
mean(initActiv$steps)
mean(initActiv$steps, na.rm = TRUE)
tapply(initActiv$steps, initActiv$date, sum)
tapply(initActiv$steps, initActiv$date, sum, na.rm = TRUE)
mean(tapply(initActiv$steps, initActiv$date, sum, na.rm = TRUE))
tapply(initActiv$steps, initActiv$date, sum, na.rm = TRUE)
steps_per_day
steps_per_day <- tapply(initActiv$steps, initActiv$date, sum, na.rm = TRUE)
steps_per_day <- tapply(initActiv$steps, initActiv$date, sum, na.rm = TRUE)
steps_per_day
names(steps_per_day)
steps_per_day[1]
steps_per_day[[1]
]
steps_per_day[[1]]
class(steps_per_day)
as.data.frame(steps_per_day)
.frame(
tapp
steps_per_day <- as.data.frame(
tapply(initActiv$steps, initActiv$date, sum, na.rm = TRUE))
steps_per_day
steps_daily <- tapply(initActiv$steps, initActiv$date, sum, na.rm = TRUE)
steps_daily <- cbind(names(steps_daily), steps_daily)
View(steps_daily)
steps_daily <- tapply(initActiv$steps, initActiv$date, sum, na.rm = TRUE)
hist(steps_daily, names(steps_daily))
hist(steps_daily
)
hist(steps_daily)
hist(steps_daily, freq = FALSE)
hist(steps_daily, freq = TRUE)
hist(1:20)
hist(1:20, plot = TRUE)
hist(1:20, plot = FALSE)
hist(1:20, breaks = 20)
hist(1:20, breaks = 20, freq = FALSE)
hist(1:20, breaks = 20, freq = NULL)
summary(steps_daily)
hist(steps_daily)
hist(steps_daily, breakes = 10)
hist(steps_daily, breaks = 10)
hist(steps_daily, breaks = 10)
hist(steps_daily, breaks = 10)
hist(steps_daily, breaks = 5)
hist(steps_daily, breaks = 6)
hist(steps_daily, breaks = 4)
hist(steps_daily, breaks = 4, col = "green", xlab = "steps per day", main = "frequancy of steps per day")
hist(steps_daily, breaks = 10, col = "green", xlab = "steps per day", main = "frequancy of steps per day")
hist(steps_daily, breaks = 10, col = "green", xlab = "steps per day", main = "frequancy of steps per day", right = TRUE)
hist(steps_daily, breaks = 10, col = "green", xlab = "steps per day", main = "frequancy of steps per day")
hist(steps_daily, breaks = 10, col = "green", xlab = "steps per day", main = "frequancy of steps per day")
hist(steps_daily, breaks = 10, col = "green", xname = "steps per day", main = "frequancy of steps per day")
hist(steps_daily, breaks = 10, col = "green", xlab = "steps per day", main = "frequancy of steps per day")
hist(steps_daily, breaks = 10, col = "green", xlab = "steps per day", main = "frequancy of steps per day", counts = 5)
hist(steps_daily, breaks = 10, col = "green", xlab = "steps per day", main = "frequancy of steps per day", counts = 5)
hist(steps_daily, breaks = 10, col = "green", xlab = "steps per day", main = "frequancy of steps per day")
hist(steps_daily, breaks = 10, col = "green", xlab = "steps per day", main = "frequancy of steps per day")
hist(steps_daily, breaks = 10, col = "green", xlab = "steps per day", main = "frequancy of steps per day")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(y = steps_5min, x = names(steps_5min), type = "l")
plot(y = steps_5min, x = names(steps_5min), type = "l",
xlab = "minutes from the begining of day",
ylab = "average steps")
plot(y = steps_5min, x = names(steps_5min), type = "l",
xlab = "minutes from the begining of day",
ylab = "average steps",
name = "Average daily activity pattern")
plot(y = steps_5min, x = names(steps_5min), type = "l",
xlab = "minutes from the begining of day",
ylab = "average steps",
main = "Average daily activity pattern")
steps_5min
steps_5m
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
steps_5m<- tapply(initActiv$steps, initActiv$interval, mean, na.rm = TRUE)
plot(y = steps_5m, x = names(steps_5m), type = "l",
xlab = "minutes from the begining of day",
ylab = "average steps",
main = "Average daily activity pattern")
```
```{r}
max_steps_val <- max(steps_5m)
max_steps_period <- as.numeric(names(steps_5m)[steps_5m == max_steps_val)
```
The most active period is between `r max_steps_period` and `r max_steps_period + 5` minutes from the beginig of day. Average steps in this period are `r max_steps_val`
## Imputing missing values
I'll use average steps in every 5 minutes interval to fill missed values
```{r missed_values}
```
## Are there differences in activity patterns between weekdays and weekends?
steps_5m
initActiv_impr <- initActiv
initActiv_impr[is.na(initActiv_impr$steps)]
initActiv_impr[is.na(initActiv_impr$steps), c("interval", "steps")]
merge(initActiv_5m, steps_5m, by.x = interval, by.y = interval)
merge(initActiv_impr, steps_5m, by.x = interval, by.y = interval)
merge(initActiv_impr, steps_5m, by.x = "interval", by.y = "interval")
steps_5m
initActiv_impr$interval[is.na(initActiv_impr$steps)]
initActiv_impr$steps[is.na(initActiv_impr$steps)] <- steps_5m[initActiv_impr$interval[is.na(initActiv_impr$steps)] ]
steps_5m[initActiv_impr$interval[is.na(initActiv_impr$steps)] ]
initActiv_impr$interval[is.na(initActiv_impr$steps)]
head(initActiv_impr$interval[is.na(initActiv_impr$steps)])
steps_5m[head(initActiv_impr$interval[is.na(initActiv_impr$steps)]))
steps_5m[head(initActiv_impr$interval[is.na(initActiv_impr$steps)])]
steps_5m[[head(initActiv_impr$interval[is.na(initActiv_impr$steps)])]]
head(initActiv_impr$interval[is.na(initActiv_impr$steps)])
steps_5m[[255]]
steps_5m[[300]]
steps_5m[[305]]
steps_5m
steps_5m[["305"]]
steps_5m[["2355"]]
steps_5m[[as.character(head(initActiv_impr$interval[is.na(initActiv_impr$steps)]))]]
steps_5m[as.character(head(initActiv_impr$interval[is.na(initActiv_impr$steps)]))]
steps_5m[as.character(initActiv_impr$interval[is.na(initActiv_impr$steps)])]
initActiv_impr$steps[is.na(initActiv_impr$steps)] <- steps_5m[as.character(initActiv_impr$interval[is.na(initActiv_impr$steps)])]
initActiv_impr
str(initActiv_impr)
str(initActiv)
initActiv_impr$steps[is.na(initActiv_impr$steps)] <- round(steps_5m[as.character(initActiv_impr$interval[is.na(initActiv_impr$steps)])],0)
str(initActiv_impr)
initActiv_impr <- initActiv
initActiv_impr$steps[is.na(initActiv_impr$steps)] <- round(steps_5m[as.character(initActiv_impr$interval[is.na(initActiv_impr$steps)])],0)
str(initActiv_impr)
initActiv_impr$steps[is.na(initActiv_impr$steps)] <- as,integer(steps_5m[as.character(initActiv_impr$interval[is.na(initActiv_impr$steps)])])
initActiv_impr$steps[is.na(initActiv_impr$steps)] <- as.integer(steps_5m[as.character(initActiv_impr$interval[is.na(initActiv_impr$steps)])])
str(initActiv_impr)
output:
html_document:
keep_md: true
---
```{r setoptions, echo=FALSE}
library(knitr)
opts_chunk$set(cashe = FALSE)
```
## Loading and preprocessing the data
```{r reading_file, results='hide'}
## reading file
#unzip("activity.zip", overwrite = FALSE, exdir = "figure")
initActiv <- read.csv("figure/activity.csv")
## adding new useful dimensions ##
initActiv$hour <- floor(initActiv$interval / 60)
initActiv$minute <- initActiv$interval - initActiv$hour*60
initActiv$datetime <- as.POSIXlt(
paste(initActiv$date, initActiv$hour, initActiv$minute, sep = " "),
format = "%Y-%m-%d %H %M")
```
## What is mean total number of steps taken per day?
```{r mean_steps_per_day}
steps_daily <- tapply(initActiv$steps, initActiv$date, sum, na.rm = TRUE)
#unzip("activity.zip", overwrite = FALSE, exdir = "figure")
initActiv <- read.csv("figure/activity.csv")
## adding new useful dimensions ##
initActiv$hour <- floor(initActiv$interval / 60)
initActiv$minute <- initActiv$interval - initActiv$hour*60
initActiv$datetime <- as.POSIXlt(
paste(initActiv$date, initActiv$hour, initActiv$minute, sep = " "),
format = "%Y-%m-%d %H %M")
```
## What is mean total number of steps taken per day?
```{r mean_steps_per_day}
steps_daily <- tapply(initActiv$steps, initActiv$date, sum, na.rm = TRUE)
mean(steps_daily)
median(steps_daily)
hist(steps_daily, breaks = 10, col = "green", xlab = "steps per day",
main = "frequancy of steps per day")
steps_5m<- tapply(initActiv$steps, initActiv$interval, mean, na.rm = TRUE)
plot(y = steps_5m, x = names(steps_5m), type = "l",
xlab = "minutes from the begining of day",
ylab = "average steps",
main = "Average daily activity pattern")
max_steps_val <- max(steps_5m)
max_steps_period <- as.numeric(names(steps_5m)[steps_5m == max_steps_val)
max_steps_period <- as.numeric(names(steps_5m)[steps_5m == max_steps_val)
max_steps_period <- as.numeric(names(steps_5m)[steps_5m == max_steps_val)
max_steps_period <- as.numeric(names(steps_5m)[steps_5m == max_steps_val]
)
max_steps_period <- as.numeric(names(steps_5m)[steps_5m == max_steps_val])
max_steps_val <- max(steps_5m)
max_steps_period <- as.integer(names(steps_5m)[steps_5m == max_steps_val])
new_active <- initActiv
new_active$steps[is.na(new_active$steps)] <- as.integer(steps_5m[as.character(new_active$interval[is.na(new_active$steps)])])
```
new_active <- initActiv
new_active$steps[is.na(new_active$steps)] <- as.integer(steps_5m[as.character(new_active$interval[is.na(new_active$steps)])])
str(new_active)
sum(is.na(new_active$steps))
new_active <- initActiv
sum(is.na(new_active$steps))
new_active$steps[is.na(new_active$steps)] <- as.integer(steps_5m[as.character(new_active$interval[is.na(new_active$steps)])])
sum(is.na(new_active$steps))
hist(new_steps_daily, breaks = 10, col = "green", xlab = "steps per day",
main = "frequancy of steps per day")
hist(new_steps_daily, breaks = 10, col = "green", xlab = "steps per day",
main = "frequancy of steps per day")
new_steps_daily <- tapply(new_active$steps, new_active$date, sum, na.rm = TRUE)
mean(new_steps_daily)
median(new_steps_daily)
hist(new_steps_daily, breaks = 10, col = "green", xlab = "steps per day",
main = "frequancy of steps per day")
initActiv$date <- as.Date(initActiv$date)
## reading file
#unzip("activity.zip", overwrite = FALSE, exdir = "figure")
initActiv <- read.csv("figure/activity.csv")
## adding new useful dimensions ##
initActiv$hour <- floor(initActiv$interval / 60)
initActiv$minute <- initActiv$interval - initActiv$hour*60
initActiv$datetime <- as.POSIXlt(
paste(initActiv$date, initActiv$hour, initActiv$minute, sep = " "),
format = "%Y-%m-%d %H %M")
initActiv$date <- as.Date(initActiv$date)
```
## What is mean total number of steps taken per day?
```{r mean_steps_per_day}
steps_daily <- tapply(initActiv$steps, initActiv$date, sum, na.rm = TRUE)
mean(steps_daily)
median(steps_daily)
hist(steps_daily, breaks = 10, col = "green", xlab = "steps per day",
main = "frequancy of steps per day")
```
## What is the average daily activity pattern?
```{r avg_daily_pattern}
steps_5m<- tapply(initActiv$steps, initActiv$interval, mean, na.rm = TRUE)
plot(y = steps_5m, x = names(steps_5m), type = "l",
xlab = "minutes from the begining of day",
ylab = "average steps",
main = "Average daily activity pattern")
```
```{r}
max_steps_val <- max(steps_5m)
max_steps_period <- as.integer(names(steps_5m)[steps_5m == max_steps_val])
```
The most active period is between `r max_steps_period` and `r max_steps_period + 5` minutes from the beginig of day. Average steps in this period are `r max_steps_val`
## Imputing missing values
I'll use average steps in every 5 minutes interval to fill missed values
```{r missed_values}
new_active <- initActiv
sum(is.na(new_active$steps))
new_active$steps[is.na(new_active$steps)] <- as.integer(steps_5m[as.character(new_active$interval[is.na(new_active$steps)])])
sum(is.na(new_active$steps))
new_steps_daily <- tapply(new_active$steps, new_active$date, sum, na.rm = TRUE)
mean(new_steps_daily)
median(new_steps_daily)
hist(new_steps_daily, breaks = 10, col = "green", xlab = "steps per day",
main = "frequancy of steps per day")
hist(new_steps_daily, breaks = 10, col = "green", xlab = "steps per day",
main = "frequancy of steps per day")
mean(new_steps_daily)
median(new_steps_daily)
new_active <- initActiv
sum(is.na(new_active$steps))
new_active$steps[is.na(new_active$steps)] <- as.integer(steps_5m[as.character(new_active$interval[is.na(new_active$steps)])])
sum(is.na(new_active$steps))
new_steps_daily <- tapply(new_active$steps, new_active$date, sum, na.rm = TRUE)
mean(new_steps_daily)
median(new_steps_daily)
hist(new_steps_daily, breaks = 10, col = "green", xlab = "steps per day",
main = "frequancy of steps per day")
new_active$weekday <- weekdays(new_active$date)
new_active$is_weekend <- "weekday"
new_active$is_weekend[new_active$weekday %in% c("Saturday"," Sunday")] <- "weekend"
table(new_active$weekday)
table(new_active$is_weekend)
library(lattice)
xyplot(new_active$steps ~ new_active$is_weekend)
xyplot(new_active$is_weekend ~ new_active$steps)
xyplot(new_active$steps ~ new_active$interval)
xyplot(mean(new_active$steps) ~ new_active$interval)
tapply(new_active$steps, new_active$is_weekend)
tapply(new_active$steps, new_active$is_weekend, mean)
xyplot(steps ~ interval | is_weekend, data = new_active)
xyplot(steps ~ interval | is_weekend, data = new_active, layout(c(2, 1)))
xyplot(steps ~ interval | is_weekend, data = new_active, layout(c(1, 2)))
bwplot(steps ~ interval | is_weekend, data = new_active, layout(c(1, 2)))
table(new_active$steps)
table(new_active$steps ~ new_active$is_weekend)
table(new_active$steps, new_active$is_weekend)
table(new_active$steps, new_active$is_weekend, new_active$interval)
flattable(new_active$steps, new_active$is_weekend, new_active$interval)
xtabs(steps ~ interval | is_weekend, data = new_active)
xtabs(steps ~ interval , data = new_active)
ftable(steps ~ interval , data = new_active)
head(ftable(steps ~ interval , data = new_active))
tapply(steps, c(interval, is_weekend), mean, data = new_active)
tapply(new_active$steps, new_active[, c("interval", "is_weekend"), mean]
)
tapply(new_active$steps, new_active[, c("interval", "is_weekend"), mean)
tapply(new_active$steps, new_active[, c("interval", "is_weekend")], mean)
plot_data <- tapply(new_active$steps, new_active[, c("interval", "is_weekend")], mean)
str(plot_data)
xyplot(plot_data)
head(plot_data)
head(plot_data[1])
head(plot_data[2])
head(plot_data[3])
head(plot_data[1, 2])
head(plot_data$weekend)
names(plot_data)
head(plot_data[3])
head(plot_data[3,1])
xyplot(steps ~ interval | is_weekend)
xyplot(steps ~ interval | is_weekend, data = new_acrive)
xyplot(steps ~ interval | is_weekend, data = new_active)
xyplot(steps ~ interval | is_weekend * weekday, data = new_active)
new_active$is_weekend <- "weekday"
new_active$is_weekend[new_active$weekday %in% c("Saturday"," Sunday")] <- "weekend"
xyplot(steps ~ interval | is_weekend * weekday, data = new_active)
table(new_active$weekday)
table(new_active$is_weekend)
new_active$is_weekend[new_active$weekday %in% c("Saturday", "Sunday")] <- "weekend"
table(new_active$is_weekend)
xyplot(steps ~ interval | is_weekend * weekday, data = new_active)
